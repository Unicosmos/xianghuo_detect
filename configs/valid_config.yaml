# YOLO训练配置文件模板
# 基于Ultralytics YOLO最佳实践和项目经验
# 使用说明：复制此模板并根据具体任务需求修改相应参数

# ============================================================================
# 基础任务配置
# ============================================================================
task: detect  # 任务类型：detect(目标检测), segment(实例分割), classify(图像分类), pose(姿态估计), obb(有向边界框)
mode: val   # 运行模式：train(训练), val(验证), predict(预测), export(导出), track(跟踪), benchmark(基准测试)

# ============================================================================
# 项目管理配置
# ============================================================================
project: /root/hyg/projects/xianghuo_detect # 项目根目录 "{customer}-{task_desc}"
name: hyg_xianghuo_detect-250924-val  # 实验名称, "{customer}-{task_desc}-{date}-{mode}"
exist_ok: false  # 是否允许覆盖已存在的实验目录

# ============================================================================
# 模型和数据配置
# ============================================================================
# 预训练模型路径 - 根据任务类型选择合适的模型
model: ../results/hyg_xianghuo_detect-250925-train_20250925144718/weights/best.pt # 检测任务
# model: /root/zhifang/cruise/models/base/segment/yolo11n-seg.pt  # 分割任务
# model: /root/zhifang/cruise/models/base/classify/yolo11n-cls.pt  # 分类任务
# model: /root/zhifang/cruise/models/base/pose/yolo11n-pose.pt  # 姿态估计
# model: /root/zhifang/cruise/models/base/obb/yolo11n-obb.pt  # 有向边界框
# model: oss://mos-aiflow/models/base/{task}/custom_model.pt  # OSS模型路径

# 数据集配置文件路径
data: ../data/xianghuo_detect_merged_hyg_zifei_250925_split_95-5/data.yaml  # 数据集配置文件路径
# data: oss://mos-aiflow/data/{task}/{dataset_name}/data.yaml  # OSS数据路径

# ============================================================================
# 训练超参数 (运行时可通过命令行覆盖)
# ============================================================================
# 核心训练参数 - 建议通过命令行设置以便灵活调整
epochs: 80      # 训练轮数，建议：小数据集50-100，大数据集100-300
batch: 24        # 批次大小，-1表示自动选择，建议：根据GPU内存调整
imgsz: 1024       # 输入图像尺寸，必须是32的倍数，常用：640, 1024, 1280
device: 0     # 设备选择，null表示自动选择，可指定：0, [0,1], cpu
workers: 12       # 数据加载进程数，建议：CPU核心数的1-2倍
lr0: 0.01        # 初始学习率，建议：SGD=0.01, Adam=0.001
patience: 100     # 早停耐心值，建议：epochs的1/3到1/2
save_period: -1  # 模型保存周期，-1表示仅保存最佳模型
cache: true     # 数据缓存，true可加速训练但占用更多内存
resume: false     # 是否恢复训练
fraction: 1.0    # 使用数据集的比例，调试时可设为0.1
seed: 0          # 随机种子，确保结果可复现

# ============================================================================
# 模型配置
# ============================================================================
pretrained: true      # 是否使用预训练权重，强烈建议为true
optimizer: auto       # 优化器：auto/SGD/Adam/AdamW，auto会自动选择
verbose: true         # 是否显示详细训练日志
deterministic: true   # 是否使用确定性算法，确保结果可复现
save: true           # 是否保存训练检查点
time: null           # 训练时间限制(小时)

# ============================================================================
# 数据集配置
# ============================================================================
single_cls: false  # 是否将多类别数据集视为单类别
rect: false        # 是否使用矩形训练，可提高训练速度但可能影响精度

# ============================================================================
# 学习率调度配置
# ============================================================================
cos_lr: false        # 是否使用余弦学习率调度
lrf: 0.01           # 最终学习率比例 (final_lr = lr0 * lrf)
momentum: 0.937     # SGD动量
weight_decay: 0.0005 # 权重衰减，防止过拟合

# 学习率预热配置
warmup_epochs: 3.0    # 预热轮数
warmup_momentum: 0.8  # 预热阶段的动量值
warmup_bias_lr: 0.1   # 预热阶段bias层的学习率

# ============================================================================
# 训练控制配置
# ============================================================================
amp: true           # 混合精度训练，可节省显存并加速训练
profile: false      # 性能分析，调试时可开启
freeze: null        # 冻结层数，null表示不冻结
multi_scale: false  # 多尺度训练，可提高模型鲁棒性但增加训练时间
close_mosaic: 10    # 最后N个epoch关闭mosaic增强，提高最终精度

# ============================================================================
# 验证配置
# ============================================================================
val: true           # 是否在训练过程中进行验证
split: val          # 验证集划分
save_json: false    # 是否保存COCO格式的验证结果JSON文件
plots: true         # 是否生成训练过程图表和验证结果可视化

# ============================================================================
# 推理配置
# ============================================================================
conf: null          # 置信度阈值，null表示使用默认值
iou: 0.7           # NMS的IoU阈值
max_det: 300       # 每张图像最大检测数量
half: false        # 是否使用FP16推理
dnn: false         # 是否使用OpenCV DNN后端

# ============================================================================
# 损失函数权重 (根据任务类型调整)
# ============================================================================
box: 10.0    # 边界框回归损失权重
cls: 1.0    # 分类损失权重
dfl: 2.0    # 分布焦点损失权重
pose: 12.0  # 姿态估计损失权重 (仅pose任务)
kobj: 1.0   # 关键点目标损失权重 (仅pose任务)
nbs: 64     # 标准批次大小

# ============================================================================
# 数据增强配置
# ============================================================================
# HSV颜色空间增强
hsv_h: 0.015  # 色调变化范围 [0.0-1.0]
hsv_s: 0.7    # 饱和度变化范围 [0.0-1.0]
hsv_v: 0.4    # 亮度变化范围 [0.0-1.0]

# 几何变换增强
degrees: 90.0     # 旋转角度范围 [-degrees, +degrees]
translate: 0.2   # 平移范围 [0.0-1.0]
scale: 0.3       # 缩放范围 [1-scale, 1+scale]
shear: 2.0       # 剪切变换角度
perspective: 0.0001 # 透视变换强度
fliplr: 0.0      # 水平翻转概率
flipud: 0.0      # 垂直翻转概率

# 混合增强
mosaic: 0.8       # Mosaic增强概率，强烈推荐
mixup: 0.1        # MixUp增强概率
copy_paste: 0.0   # Copy-Paste增强概率 (仅分割任务)
copy_paste_mode: flip  # Copy-Paste模式

# 高级增强
auto_augment: randaugment  # 自动增强策略：randaugment/autoaugment/augmix
erasing: 0.1      # 随机擦除概率
cutmix: 0.1       # CutMix增强概率
bgr: 0.0          # BGR通道随机交换概率

# ============================================================================
# 分割任务专用配置
# ============================================================================
overlap_mask: true  # 分割任务中是否允许mask重叠
mask_ratio: 4       # mask下采样比例
dropout: 0.0        # Dropout比例
retina_masks: false # 是否使用高分辨率mask

# ============================================================================
# 预测和可视化配置
# ============================================================================
source: null         # 预测数据源路径
vid_stride: 1        # 视频帧间隔
stream_buffer: false # 是否启用流缓冲
visualize: false     # 是否可视化特征图
augment: false       # 推理时是否使用TTA
agnostic_nms: false  # 是否使用类别无关的NMS
classes: null        # 指定检测的类别ID列表
embed: null          # 特征嵌入维度

# 结果保存配置
show: false          # 是否实时显示检测结果
save_frames: false   # 是否保存视频帧
save_txt: false      # 是否保存txt格式的检测结果
save_conf: false     # 是否在保存结果中包含置信度
save_crop: false     # 是否保存检测目标的裁剪图像
show_labels: true    # 是否在可视化中显示类别标签
show_conf: true      # 是否在可视化中显示置信度
show_boxes: true     # 是否在可视化中显示边界框
line_width: null     # 边界框线宽

# ============================================================================
# 模型导出配置
# ============================================================================
format: torchscript  # 导出格式：torchscript/onnx/engine/coreml等
keras: false         # 是否导出为Keras格式
optimize: false      # 是否优化导出的模型
int8: false          # 是否使用INT8量化
dynamic: false       # 是否支持动态输入尺寸
simplify: true       # 是否简化ONNX模型结构
opset: null          # ONNX opset版本
workspace: null      # TensorRT工作空间大小(GB)
nms: false           # 是否在导出模型中包含NMS

# ============================================================================
# 其他配置
# ============================================================================
cfg: null                # 自定义配置文件路径
tracker: botsort.yaml    # 多目标跟踪器配置文件

# ============================================================================
# 使用建议和最佳实践
# ============================================================================
# 1. 数据集准备：
#    - 确保数据集格式正确（YOLO格式）
#    - 数据集大小建议：训练集70%，验证集20%，测试集10%
#    - 图像尺寸建议统一，且为32的倍数
#
# 2. 模型选择：
#    - 小数据集：使用yolo11n或yolo11s
#    - 中等数据集：使用yolo11m
#    - 大数据集：使用yolo11l或yolo11x
#    - 实时应用：优先选择较小模型
#
# 3. 超参数调优：
#    - 学习率：从0.01开始，根据loss曲线调整
#    - 批次大小：尽可能大，但不超过GPU内存限制
#    - 图像尺寸：平衡精度和速度需求
#
# 4. 数据增强：
#    - 小数据集：增加数据增强强度
#    - 大数据集：适度使用数据增强
#    - 特定场景：根据实际应用调整增强策略
#
# 5. 训练监控：
#    - 观察loss曲线，避免过拟合
#    - 使用验证集监控模型性能
#    - 适时调整学习率和早停策略
#
# 6. 性能优化：
#    - 使用混合精度训练(amp=true)
#    - 合理设置workers数量
#    - 考虑使用数据缓存(cache=true)
